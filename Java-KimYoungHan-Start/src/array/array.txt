객체 지향적 언어에서 동적 메모리 할당의 사용은 그 언어의 핵심 철학과 관련이 있습니다.
객체 지향 프로그래밍(OOP)의 주요 개념 중 하나는 “추상화”입니다.
이는 프로그램이 실제 세계의 복잡성을 모델링할 수 있도록 설계되었다는 것을 의미하며,
실시간으로 변화하는 데이터에 유연하게 대응할 수 있어야 합니다.

int students[]; 배열 변수 선언
students = new int[5]; 배열 생성

students 에서는 배열의 참조값(주소)을 보관

**참고: 리펙토링**
리펙토링(Refactoring)은 기존의 코드 기능은 유지하면서 내부 구조를 개선하여 가독성을 높이고, 유지보수를
용이하게 하는 과정을 뜻한다. 이는 중복을 제거하고, 복잡성을 줄이며, 이해하기 쉬운 코드로 만들기 위해 수행된
다. 리펙토링은 버그를 줄이고, 프로그램의 성능을 향상시킬 수도 있으며, 코드의 설계를 개선하는 데에도 도움이
된다.
쉽게 이야기해서 작동하는 기능은 똑같은데, 코드를 개선하는 것을 리펙토링이라 한다.

arr[row][column] arr[행][열]