**접근 제어자의 종류**
`private` : 모든 외부 호출을 막는다.
`default` (package-private): 같은 패키지안에서 호출은 허용한다.
`protected` : 같은 패키지안에서 호출은 허용한다. 패키지가 달라도 상속 관계의 호출은 허용한다.
`public` : 모든 외부 호출을 허용한다.

C++: class 내부에서 멤버 변수의 기본 접근 제어자는 private
Java: 클래스 내부 멤버 변수의 기본 접근 제어자는 패키지 프라이빗(package-private) (같은 패키지 내에서 접근 가능)

	•	클래스(Class)
	•	Java: 클래스별 .java 파일을 따로 만들고, 패키지와 연동됨.
	•	C++: .cpp 파일에 여러 개의 클래스를 포함할 수 있음.
	•	패키지(Package) vs 네임스페이스(Namespace)
	•	Java: 패키지는 폴더 구조와 연동되며, import해야 사용 가능.
	•	C++: 네임스페이스는 파일 구조와 무관하며, 클래스 외에도 함수, 변수 포함 가능.



클래스 AccessData 내부에 정의된 인스턴스 메서드이며, 같은 클래스 내의 모든 멤버에 접근 가능하다.
자바의 private 멤버는 같은 클래스 내부에서는 접근 가능하다.
외부에서는 public 메서드(innerAccess())를 통해 간접적으로 접근할 수 있다.

**클래스 레벨의 접근 제어자 규칙**
클래스 레벨의 접근 제어자는 `public` , `default` 만 사용할 수 있다.
`private` , `protected` 는 사용할 수 없다.
`public` 클래스는 반드시 파일명과 이름이 같아야 한다.
하나의 자바 파일에 `public` 클래스는 하나만 등장할 수 있다.
하나의 자바 파일에 `default` 접근 제어자를 사용하는 클래스는 무한정 만들 수 있다.

**객체의 데이터는 객체가 제공하는 기능인 메서드를 통해서 접근해야 한다.**
정리하면 데이터는 모두 숨기고, 기능은 꼭 필요한 기능만 노출하는 것이 좋은 캡슐화이다.

순수 추상 클래스는 다형성을 위해서 껍데기를 제공.
