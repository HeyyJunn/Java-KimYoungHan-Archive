**참고**: 스택 영역은 더 정확히는 각 쓰레드별로 하나의 실행 스택이 생성된다. 따라서 쓰레드 수 만큼 스택 영역이
생성된다. 지금은 쓰레드를 1개만 사용하므로 스택 영역도 하나이다. 쓰레드에 대한 부분은 멀티 쓰레드를 학습해
야 이해할 수 있다.

정리하면 인스턴스의 메서드를 호출하면 실제로는 메서드 영역에 있는 코드를 불러서 수행한다.

스택 ( stack )
    **후입 선출(LIFO, Last In First Out)**
    1(넣기) 2(넣기) 3(넣기) 3(빼기) 2(빼기) 1(빼기)
큐 ( Queue )
    **선입 선출(FIFO, First In First Out)**
    1(넣기) 2(넣기) 3(넣기) 1(빼기) 2(빼기) 3(빼기)

자바는 스택 영역을 사용해서 메서드 호출과 지역 변수(매개변수 포함)를 관리한다.
메서드를 계속 호출하면 스택 프레임이 계속 쌓인다.
지역 변수(매개변수 포함)는 스택 영역에서 관리한다.
스택 프레임이 종료되면 지역 변수도 함께 제거된다.
스택 프레임이 모두 제거되면 프로그램도 종료된다.


static 변수 (정적 변수)

static은 클래스(정적) 영역에 저장되는 변수를 선언하거나, 객체 생성 없이 사용할 수 있는 메서드를 정의할 때 사용한다.
즉, static이 붙은 변수나 메서드는 클래스 자체에 속하며, 인스턴스(객체) 없이 사용 가능하다.

📌 특징
	•	클래스 로드 시 한 번만 메모리에 할당됨 (객체마다 생성되지 않음)
	•	객체가 아닌 클래스 자체에 속함
	•	모든 객체가 동일한 값을 공유

static 멤버 변수는 메서드 영역에서 관리한다
정적변수는 메서드 영역에서 관리
static 이 붙지 않은 멤버 변수는 인스턴스 변수 ( 인스턴스 변수는 인스턴스를 만들때 새로 만들어진다)

클래스변수 (static 이붙은 멤버 변수)
정적변수
static 변수

static 변수는 인스턴스와 무관하게 클래스에 바로 접근해서 사용할 수 있고
클래스 자체에 소속되어 있음
자바 프로그램 시작할 때 딱 1개가 만들어짐
여러곳에서 공유하는 목적으로 사용

// 정리
객체, 객체 내부의 변수는 힙 영역
객체를 가르키는 참조변수 는 스택에 저장

Person p1 = new Person(); p1 참조변수는 스택ㄱ에 저장, new Person() 으로 만들어진 객체는 힙에 저장됨


Stack (스택)                        Heap (힙)
┌───────────────┐                 ┌────────────────┐
│ p1 (참조변수) ───────────────▶    │ Person 객체     │
│               │                 │ name = "Alice" │
│               │                 │ age  = 25      │
└───────────────┘                 └────────────────┘
	지역 변수는 메서드 실행 중에만 존재하며, 실행이 끝나면 제거되므로 스택(Stack)에 저장된다.
반면, 인스턴스 변수는 객체가 생성될 때 할당되며, 객체가 존재하는 동안 유지되므로 힙(Heap)에 저장된다.

클래스를 통한 접근하는 것을 추천
(인스턴스를 통한 접근 data4.count 는 정적변수인지 헷갈림)

**인스턴스를 통한 접근 `data4.count` **
정적 변수의 경우 인스턴스를 통한 접근은 추천하지 않는다. 왜냐하면 코드를 읽을 때 마치 인스턴스 변수에 접근하는
것 처럼 오해할 수 있기 때문이다.
**클래스를 통한 접근 `Data3.count` **
정적 변수는 클래스에서 공용으로 관리하기 때문에 클래스를 통해서 접근하는 것이 더 명확하다. 따라서 정적 변수에 접
근할 때는 클래스를 통해서 접근하자.

`static` 이 붙지 않은 메서드는 인스턴스를 생성해야 호출할 수 있다. 이것을 **인스턴스 메서드**라 한다.

반대로 모든 곳에서 `static` 을 호출할 수 있다.
정적 메서드는 공용 기능이다. 따라서 접근 제어자만 허락한다면 클래스를 통해 모든 곳에서 `static` 을 호
출할 수 있다.

**정적 메서드가 인스턴스의 기능을 사용할 수 없는 이유**
정적 메서드는 클래스의 이름을 통해 바로 호출할 수 있다.


static import
정적 메서드를 사용할 때 해당 메서드를 다음과 같이 자주 호출해야 한다면 `static import` 기능을 고려하자.


main() 메서드는 정적 메서드
인스턴스 생성 없이 실행하는 가장 대표적인 메서드가 바로 `main()` 메서드이다.
정적 메서드는 정적 메서드만 호출할 수 있다. 따라서 정적 메서드인 `main()` 이 호출하는 메서드에는 정적 메서드를
사용했다.
물론 더 정확히 말하자면 정적 메서드는 같은 클래스 내부에서 정적 메서드만 호출할 수 있다. 따라서 정적 메서드인
`main()` 메서드가 같은 클래스에서 호출하는 메서드도 정적 메서드로 선언해서 사용했다.

📌 잘못된 이해 (틀린 개념)
❌ “static 메서드는 static 멤버만 호출하고, 인스턴스는 생성할 수 없다”
✔ → 잘못된 개념! static 메서드 내부에서도 new를 사용하면 객체를 생성할 수 있다.

📌 올바른 개념
✔ static 메서드는 특정 객체(인스턴스)와 무관하지만, 내부에서 new 키워드를 사용하면 인스턴스를 만들 수 있다.
✔ 객체가 생성되면, 그 객체를 통해 인스턴스 변수 및 메서드를 사용할 수 있다.

